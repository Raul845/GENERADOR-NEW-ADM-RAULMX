#!/bin/bash
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
#Screen
[[ ! -e /usr/bin/trans ]] && { 
echo -e "Piratear es muy feo, toma vergüenza en la cara"
echo -e "Di duro para llegar hasta aquí, Muchas noches sin dormir"
echo -e "Adquiere un Serial y Ayuda al desarrollador"
}
SCPdir="/etc/newadm" && [[ ! -d ${SCPdir} ]] && exit 1
SCPusr="${SCPdir}/ger-user" && [[ ! -d ${SCPusr} ]] && mkdir ${SCPusr}
SCPfrm="/etc/ger-frm" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPinst="/etc/ger-inst" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPidioma="${SCPdir}/idioma"
if [[ -e /etc/bash.bashrc-bakup ]]; then AutoRun="\033[1;32m[on]"
elif [[ -e /etc/bash.bashrc ]]; then AutoRun="\033[1;31m[off]"
fi
# Funcoes Globais
msg () {
local colors="/etc/new-adm-color"
if [[ ! -e $colors ]]; then
COLOR[0]='\033[1;37m' #BRAN='\033[1;37m'
COLOR[1]='\e[31m' #VERMELHO='\e[31m'
COLOR[2]='\e[32m' #VERDE='\e[32m'
COLOR[3]='\e[33m' #AMARELO='\e[33m'
COLOR[4]='\e[34m' #AZUL='\e[34m'
COLOR[5]='\e[35m' #MAGENTA='\e[35m'
COLOR[6]='\033[1;36m' #MAG='\033[1;36m'
COLOR[7]='\033[1;34m' #AZULR='\033[1;34m'
COLOR[8]='\e[0;31m' #rojoc='\e[0;31m'
else
local COL=0
for number in $(cat $colors); do
case $number in
1)COLOR[$COL]='\033[1;37m';;
2)COLOR[$COL]='\e[31m';;
3)COLOR[$COL]='\e[32m';;
4)COLOR[$COL]='\e[33m';;
5)COLOR[$COL]='\e[34m';;
6)COLOR[$COL]='\e[35m';;
7)COLOR[$COL]='\033[1;36m';;
8)COLOR[$COL]='\033[1;34m';;
9)COLOR[$COL]='\033[0;31m';;
esac
let COL++
done
fi
NEGRITO='\e[1m'
SEMCOR='\e[0m'
 case $1 in
  -ne)cor="${COLOR[1]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
  -ama)cor="${COLOR[3]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm)cor="${COLOR[3]}${NEGRITO}[!] ${COLOR[1]}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm2)cor="${COLOR[1]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -azu)cor="${COLOR[6]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verd)cor="${COLOR[2]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -bra)cor="${COLOR[0]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  "-bar2"|"-bar")cor="\e[1;33m<=>=<=>=<=>=<=>=<=>=<=>=<=>=<=>=<=>=<=>=<=>=<=>\e[0m" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
  -azuc)cor="${COLOR[7]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -rojoc)cor="${COLOR[8]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
esac
}
canbio_color () {
msg -ama "$(fun_trans "Hola, este es el Administrador de Colores") \033[1;31m[ NEW - ULTIMATE - SCRIPT ]  \033[1;33m[\033[1;34m OFICIAL BY RAUL_FERRAL_MX \033[1;33m]"
msg -bar2
msg -ama "$(fun_trans "Selecciona 7 colores"): "
echo -e '\033[1;37m [1] ###\033[0m'
echo -e '\e[31m [2] ###\033[0m'
echo -e '\e[32m [3] ###\033[0m'
echo -e '\e[33m [4] ###\033[0m'
echo -e '\e[34m [5] ###\033[0m'
echo -e '\e[35m [6] ###\033[0m'
echo -e '\033[1;36m [7] ###\033[0m'
msg -bar2
for number in $(echo {1..7}); do
msg -ne "$(fun_trans "Introduzca el color") [$number]: " && read corselect
[[ $corselect != @([1-7]) ]] && corselect=1
cores+="$corselect "
corselect=0
done
echo "$cores" > /etc/new-adm-color
msg -bar2
}
fun_trans () { 
local texto
local retorno
declare -A texto
SCPidioma="${SCPdir}/idioma"
[[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
local LINGUAGE=$(cat ${SCPidioma})
[[ -z $LINGUAGE ]] && LINGUAGE=es
[[ $LINGUAGE = "es" ]] && echo "$@" && return
[[ ! -e /usr/bin/trans ]] && wget -O /usr/bin/trans https://www.dropbox.com/s/l6iqf5xjtjmpdx5/trans?dl=0 &> /dev/null
[[ ! -e /etc/texto-adm ]] && touch /etc/texto-adm
source /etc/texto-adm
if [[ -z "$(echo ${texto[$@]})" ]]; then
#ENGINES=(aspell google deepl bing spell hunspell apertium yandex)
#NUM="$(($RANDOM%${#ENGINES[@]}))"
retorno="$(source trans -e bing -b es:${LINGUAGE} "$@"|sed -e 's/[^a-z0-9 -]//ig' 2>/dev/null)"
echo "texto[$@]='$retorno'"  >> /etc/texto-adm
echo "$retorno"
else
echo "${texto[$@]}"
fi
}
atualiza_fun () {
cd $HOME
tput cuu1 && tput dl1
msg -bar2
msg -ama "$(fun_trans "ACTUALIZADOR"): \E[41;1;37m[ NEW - ULTIMATE - SCRIPT ]  \\E[41;1;37m RAUL_FERRAL_MX  \033[1;31m[\033[1;37mV 3.0\033[1;31m]"
msg -verm "$(fun_trans "Al proseguir los datos como el tiempo de uso seran perdidos"): "
msg -bar2
while [[ $Key != @(s|S|y|Y|n|N) ]]; do
msg -ne "$(fun_trans "esta de acuerdo")? [S/N]: " && read Key
tput cuu1 && tput dl1
done
if [[ $Key = @(s|S|y|Y) ]]; then
msg -verm "$(fun_trans "Perfecto Iniciando Procedimiento"): "
wget -O $HOME/raulferralmx.sh https://www.dropbox.com/s/sp5xdmw5ue5v2h1/raulferralmx.sh &> /dev/null
chmod +x $HOME/raulferralmx.sh*
local LINGUAGE=$(cat ${SCPidioma})
$HOME/raulferralmx.sh "${LINGUAGE}"
else
msg -verm "$(fun_trans "Procedimiento Cancelado"): "
msg -bar2
fi
}
funcao_idioma () {
tput cuu1 && tput dl1
msg -bar2
declare -A idioma=( [1]="en English" [2]="fr Franch" [3]="de German" [4]="it Italian" [5]="pl Polish" [6]="pt Portuguese" [7]="es Spanish" [8]="tr Turkish" )
for ((i=1; i<=12; i++)); do
valor1="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor1 ]] && break
valor1="\033[1;32m[$i] > \033[1;33m$valor1"
    while [[ ${#valor1} -lt 37 ]]; do
       valor1=$valor1" "
    done
echo -ne "$valor1"
let i++
valor2="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor2 ]] && {
   echo -e " "
   break
   }
valor2="\033[1;32m[$i] > \033[1;33m$valor2"
     while [[ ${#valor2} -lt 37 ]]; do
        valor2=$valor2" "
     done
echo -ne "$valor2"
let i++
valor3="$(echo ${idioma[$i]}|cut -d' ' -f2)"
[[ -z $valor3 ]] && {
   echo -e " "
   break
   }
valor3="\033[1;32m[$i] > \033[1;33m$valor3"
     while [[ ${#valor3} -lt 37 ]]; do
        valor3=$valor3" "
     done
echo -e "$valor3"
done
msg -bar2
unset selection
while [[ ${selection} != @([1-8]) ]]; do
echo -ne "\033[1;37m$(fun_trans "Selecione una Opcion"): " && read selection
tput cuu1 && tput dl1
done
[[ -e /etc/texto-adm ]] && rm /etc/texto-adm
echo "$(echo ${idioma[$selection]}|cut -d' ' -f1)" > ${SCPidioma}
}
memorias () {
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$system")
_hora=$(printf '%(%H:%M:%S)T')
echo -e "\033[1;32mSISTEMA            MEMORIA RAM      PROCESSADOR "
echo -e "\033[1;31mOS: \033[1;37m$_system \033[1;31mTotal:\033[1;37m$_ram \033[1;31mNucleos: \033[1;37m$_core\033[0m"
echo -e "\033[1;31mHora:\033[1;37m $_hora     \033[1;31mEn uso: \033[1;37m$_usor \033[1;31mEn uso: \033[1;37m$_usop\033[0m"
}
BadVPN () {
pid_badvpn=$(ps x | grep badvpn | grep -v grep | awk '{print $1}')
if [ "$pid_badvpn" = "" ]; then
    msg -ama "$(fun_trans "Liberando Badvpn")"
    msg -bar
    if [[ ! -e /bin/badvpn-udpgw ]]; then
    wget -O /bin/badvpn-udpgw https://www.dropbox.com/s/nxf5s1lffmbikwq/badvpn-udpgw &>/dev/null
    chmod 777 /bin/badvpn-udpgw
    fi
    screen -dmS screen /bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10
    [[ "$(ps x | grep badvpn | grep -v grep | awk '{print $1}')" ]] && msg -ama "$(fun_trans "Sucesso")" || msg -ama "$(fun_trans "Falhou")"
else
    msg -ama "$(fun_trans "Parando Badvpn")"
    msg -bar
    kill -9 $(ps x | grep badvpn | grep -v grep | awk '{print $1'}) > /dev/null 2>&1
    killall badvpn-udpgw > /dev/null 2>&1
    [[ ! "$(ps x | grep badvpn | grep -v grep | awk '{print $1}')" ]] && echo -e "${cor[4]} ${txt[125]}"
    unset pid_badvpn
    fi
unset pid_badvpn
}
mine_port () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2"
    let i++
    }
done <<< "$portas_var"
for((i=0; i<=${#portas[@]}; i++)); do
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -e "${texto}"
done
}
ofus () {
unset txtofus
number=$(expr length $1)
for((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
case ${txt[$i]} in
".")txt[$i]="+";;
"+")txt[$i]=".";;
"1")txt[$i]="@";;
"@")txt[$i]="1";;
"2")txt[$i]="?";;
"?")txt[$i]="2";;
"3")txt[$i]="%";;
"%")txt[$i]="3";;
"/")txt[$i]="K";;
"K")txt[$i]="/";;
esac
txtofus+="${txt[$i]}"
done
echo "$txtofus" | rev
}
remove_ferramenta () {
echo -e "\033[1;31m$(fun_trans "ATENCION"): "
echo -e "\033[1;33m$(fun_trans "Este proceso no se puede deshacer")"
echo -e "\033[1;33m$(fun_trans "Seleccione la herramienta que desea quitar")"
msg -bar2
Numb=0
for arqs in $(ls ${SCPfrm}); do
float_data "$arqs" "$Numb" && {
  script[$Numb]="$arqs"
  let Numb++
  }
done
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "VOLVER")"
script[0]="regreso"
msg -bar2
selection=999
selection=$(selection_fun $Numb)
[[ -e "${SCPfrm}/${script[$selection]}" ]] && rm ${SCPfrm}/${script[$selection]} || return
}
agregar_ferramenta () {
tput cuu1 && tput dl1
msg -bar2
unset Key
echo -e "\033[1;31m$(fun_trans "ATENCION"): "
echo -e "\033[1;33m$(fun_trans "no introduzca una Key de actualizacion aqui")"
echo -e "\033[1;37m$(fun_trans "Escriba Key para el nuevo recurso") "
msg -bar2
while [[ -z $Key ]]; do
echo -ne "[Key/Link]: " && read Key
tput cuu1 && tput dl1
done
echo -ne "\033[1;37m$(fun_trans "Verificando key"): "
cd ${SCPfrm}
curl "$Key" &> /dev/null
if [[ $? = "0" ]]; then
echo -e "\033[1;32m $(fun_trans "Link Valido")"
REC=$(echo $Key|awk -F"/" '{print $NF}')
echo -ne "\033[1;33m$(fun_trans "Recibiendo Recurso"): \033[1;31m[$REC]"
wget -O ${SCPfrm}/${REC} $Key &>/dev/null && echo -e "\033[1;31m- \033[1;32m$(fun_trans "Recibido")" && chmod +x ${SCPfrm}/${REC} || echo -e "\033[1;31m- \033[1;31m$(fun_trans "Error al recibir")"
else
wget $(ofus "$Key") >/dev/null 2>&1 && echo -e "\033[1;32m $(fun_trans "Key Valida")" || {
    msg -verm "$(fun_trans "Key invalida")"
    msg -bar2
    return 0   
    }
fi
IP=$(ofus "$Key" | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
sleep 1s
[[ -e ${SCPfrm}/lista-arq ]] && {
  if [[ $(cat ${SCPfrm}/lista-arq) = "KEY DE INSTALAï¿½AO!" ]]; then
  echo -e "\033[1;33m$(fun_trans "KEY DE INSTALACION NO DEBE SER USADA AQUI")"
  msg -bar2
  rm ${SCPfrm}/lista-arq
  return 1
  fi
  if [[ $(cat ${SCPfrm}/lista-arq) = "KEY INVALIDA!" ]]; then
  echo -e "\033[1;33m$(fun_trans "KEY INVALIDA")"
  msg -bar2
  rm ${SCPfrm}/lista-arq
  return 1
  fi
  REQUEST=$(ofus "$Key" |cut -d'/' -f2)
  for arqx in $(cat ${SCPfrm}/lista-arq); do
  echo -ne "\033[1;33m$(fun_trans "Recibiendo Recurso"): \033[1;31m[$arqx] "
  wget -O ${SCPfrm}/${arqx} ${IP}:81/${REQUEST}/${arqx} > /dev/null 2>&1 && echo -e "\033[1;31m- \033[1;32m$(fun_trans "Recibido")" && chmod +x ${SCPfrm}/${arqx} || echo -e "\033[1;31m- \033[1;31m$(fun_trans "Error al recibir")"
  sleep 1s
  done
  rm ${SCPfrm}/lista-arq
  msg -bar2
  } 
}
limpar_caches () {
(
VE="\033[1;33m" && MA="\033[1;31m" && DE="\033[1;32m"
while [[ ! -e /tmp/abc ]]; do
A+="#"
echo -e "${VE}[${MA}${A}${VE}]" >&2
sleep 0.3s
tput cuu1 && tput dl1
done
echo -e "${VE}[${MA}${A}${VE}] - ${DE}[100%]" >&2
rm /tmp/abc
) &
echo 3 > /proc/sys/vm/drop_caches &>/dev/null
sleep 1s
sysctl -w vm.drop_caches=3 &>/dev/null
apt-get autoclean -y &>/dev/null
sleep 1s
apt-get clean -y &>/dev/null
rm /tmp/* &>/dev/null
touch /tmp/abc
sleep 0.5s
msg -bar
msg -ama "$(fun_trans "PROCEDIMIENTO CONCLUIDO")"
msg -bar
}
fun_autorun () {
if [[ -e /etc/bash.bashrc-bakup ]]; then
mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
cat /etc/bash.bashrc | grep -v "/etc/newadm/menu" > /tmp/bash
mv -f /tmp/bash /etc/bash.bashrc
msg -ama "$(fun_trans "REMOVIDO CON EXITO")"
msg -bar
elif [[ -e /etc/bash.bashrc ]]; then
cat /etc/bash.bashrc|grep -v /bin/adm > /etc/bash.bashrc.2
echo '/etc/newadm/menu' >> /etc/bash.bashrc.2
cp /etc/bash.bashrc /etc/bash.bashrc-bakup
mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
msg -ama "$(fun_trans "AUTO INICIALIZAR AGREGADO")"
msg -bar
fi
}
fun_bar () {
comando="$1"
 _=$(
$comando > /dev/null 2>&1
) & > /dev/null
pid=$!
while [[ -d /proc/$pid ]]; do
echo -ne " \033[1;33m["
   for((i=0; i<10; i++)); do
   echo -ne "\033[1;31m##"
   sleep 0.2
   done
echo -ne "\033[1;33m]"
sleep 1s
echo
tput cuu1
tput dl1
done
echo -e " \033[1;33m[\033[1;31m####################\033[1;33m] - \033[1;32m100%\033[0m"
sleep 1s
}
meu_ip () {
if [[ -e /etc/MEUIPADM ]]; then
echo "$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}
fun_ip () {
if [[ -e /etc/MEUIPADM ]]; then
IP="$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}
fun_eth () {
eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
    [[ $eth != "" ]] && {
    msg -bar
    msg -ama " $(fun_trans "Aplicar el sistema para mejorar los paquetes SSH?")"
    msg -ama " $(fun_trans "Opcion para usuarios avanzados")"
    msg -bar
    read -p " [S/N]: " -e -i n sshsn
           [[ "$sshsn" = @(s|S|y|Y) ]] && {
           echo -e "${cor[1]} $(fun_trans "Correcciï¿½n de problemas de paquetes en SSH ...")"
           echo -e " $(fun_trans "ï¿½Cual es la tasa RX?")"
           echo -ne "[ 1 - 999999999 ]: "; read rx
           [[ "$rx" = "" ]] && rx="999999999"
           echo -e " $(fun_trans "ï¿½Cual es la tarifa TX")"
           echo -ne "[ 1 - 999999999 ]: "; read tx
           [[ "$tx" = "" ]] && tx="999999999"
           apt-get install ethtool -y > /dev/null 2>&1
           ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
           }
     msg -bar
     }
}
os_system () {
system=$(echo $(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //'))
echo $system|awk '{print $1, $2}'
}
remove_script () {
msg -ama "$(fun_trans "CONFIRMA REMOCION TOTAL DE LOS SCRIPTS")?"
msg -bar
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
rm -rf ${SCPdir} &>/dev/null
rm -rf ${SCPusr} &>/dev/null
rm -rf ${SCPinst} &>/dev/null
[[ -e /bin/adm ]] && rm /bin/adm
[[ -e /usr/bin/adm ]] && rm /usr/bin/adm
[[ -e /bin/menu ]] && rm /bin/menu
[[ -e /usr/bin/menu ]] && rm /usr/bin/menu
cd $HOME
fi
}
# Menu Ferramentas
systen_info () {
msg -ama "$(fun_trans "DETALLES DEL SISTEMA")"
null="\033[1;31m"
msg -bar
if [ ! /proc/cpuinfo ]; then msg -verm "$(fun_trans "Sistema no soportado")" && msg -bar; return 1; fi
if [ ! /etc/issue.net ]; then msg -verm "$(fun_trans "Sistema no soportado")" && msg -bar; return 1; fi
if [ ! /proc/meminfo ]; then msg -verm "$(fun_trans "Sistema no soportado")" && msg -bar; return 1; fi
totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$(cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
system=$(cat /etc/issue.net)
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
[[ "$system" ]] && msg -ama "$(fun_trans "Sistema"): ${null}$system" || msg -ama "$(fun_trans "Sistema"): ${null}???"
[[ "$based" ]] && msg -ama "$(fun_trans "Basado"): ${null}$based" || msg -ama "$(fun_trans "Basado"): ${null}???"
[[ "$processor" ]] && msg -ama "$(fun_trans "procesador"): ${null}$processor x$cpus" || msg -ama "$(fun_trans "procesador"): ${null}???"
[[ "$clock" ]] && msg -ama "$(fun_trans "Frecuencia de Operacion"): ${null}$clock MHz" || msg -ama "$(fun_trans "Frecuencia de Operacion"): ${null}???"
msg -ama "$(fun_trans "Uso del procesador"): ${null}$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')"
msg -ama "$(fun_trans "Memoria Virtual Total"): ${null}$(($totalram / 1024))"
msg -ama "$(fun_trans "Memoria Virtual Em Uso"): ${null}$(($usedram / 1024))"
msg -ama "$(fun_trans "Memoria Virtual Livre"): ${null}$(($freeram / 1024))"
msg -ama "$(fun_trans "Memoria Virtual Swap"): ${null}$(($swapram / 1024))MB"
msg -ama "$(fun_trans "Tiempo en linea"): ${null}$(uptime)"
msg -ama "$(fun_trans "Nombre de la maquina"): ${null}$(hostname)"
msg -ama "$(fun_trans "Direccion De la Maquina"): ${null}$(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')"
msg -ama "$(fun_trans "Version del nucleo"): ${null}$(uname -r)"
msg -ama "$(fun_trans "Arquitectura"): ${null}$(uname -m)"
msg -bar
return 0
}
float_data () {
ofc="\033[0m${gren}(#OFC)"
dev="\033[0;33m${amar}(#DEV)"
premium="\033[0;31m${bra}(#PREMIUM)"
case $1 in
"Crear-Demo.sh") return 1;;
"panelweb.sh") return 1;;
"Gestor.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "ADMINISTRADOR VPS") $dev";;
"rootpass.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "PERMISO ROOT (googlecloud,amazon)") $premium";;
"toolmaster.py")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "TOOLMASTER") $premium";;
#"Painel.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "PANELSSH V-10(sshplus)") $premium";;
#"Paneln.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "PANELSSH V12 (sshplus)") $premium";;
"insta_painel")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "PANEL DE CARGA (acm)") $premium";;
"unddos.py")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "ANTI-DDoS DESINSTALADOR") $dev";;
"dados.py")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "ANTI-DDoS") $dev";;
"cambiopass.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "CAMBIAR CONTRASENA DE VPS") $dev";;
"vnc")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "VNC PANEL DE ADMINISTRACION") $premium";;
"htop.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "HTOP procesos del sistema") $dev";;
"Proxy-Publico.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "PROXY COLOR PUBLICO") $premium";;
"Proxy-Privado.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "PROXY COLOR PRIVADO") $premium";;
"GENERADOR_BIN.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "GENERADOR DE CC") $dev";;
"ports.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -ama "$(fun_trans "SISTEMA DE PUERTAS") $ofc";;
"fai2ban.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "FAIL2BAN PROTECCION") $ofc";;
"MasterBin.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "CONSULTAR UN BIN") $ofc";;
"payySND.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PAYLOAD FUERZA BRUTA PYTHON") $ofc";;
"paysnd.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PAYLOAD FUERZA BRUTA") $ofc";;
"apacheon.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "COMPARTIR ARCHIVO ONLINE") $ofc";;
"utils.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "(Badvpn/tcpspeed/squidcache/torrent) $ofc";;
"dados.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "MONITOR DE CONSUMO") $ofc";;
"speed.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "TEST DE VELOCIDAD") $ofc";;
"ultrahost")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "SCANNER DE SUBDOMINIO") $ofc";;
"ADMbot.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "BOT DE GESTION") TELEGRAM $ofc";;
"hora.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "ACTUALIZAR ZONA HORARIO") $ofc";;
"optimizar.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "OPTIMIZADOR DE SERVIDOR") $premium";;
"nload.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azuc "$(fun_trans "TRAFICO DE RED") $dev";;
"permisos_passwd.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -ama "$(fun_trans "ROOT/") VURTL/ GoogleCloud y Amazon $premium";;
"openssh.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "OPENSSH $(pid_inst sshd)";;
"squid.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SQUID $(pid_inst squid)";;
"dropbear.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "DROPBEAR $(pid_inst dropbear)";;
"openvpn.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "OPENVPN $(pid_inst openvpn)";;
"ssl.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SSL Dropbear $(pid_inst stunnel4)";;
"ssld.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SSL Manager $(pid_inst stunnel4)";;
"sslmanager.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -ama "SSL MANAGERS $(pid_inst stunnel4)";;
"errormanager.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -ama "CorrecciÃ³n De Puertos $(pid_inst errormanager)";;
"shadown.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -bra "Shadowsocks Cloack $(pid_inst ck-server)";;
"shadowsock.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -bra "Shadowsocks-R,Go,Liv $(pid_inst obfs-serv)";;
"shadowsocks.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -bra "Shadowsocks-Libev $(pid_inst obfs-serv)";;
"ssrrmu.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -bra "ShadowsocksR Manager $(pid_inst python)";;
"sockspy.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SOCKS PYTHON $(pid_inst python)";;
"v2ray.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -bra "V2ray Panel $(pid_inst v2ray)";;
"vdoray.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -ama "V2ray Manager $(pid_inst v2ray)";;
"PDirect.py")return 1;;
"PGet.py")return 1;;
"POpen.py")return 1;;
"PPriv.py")return 1;;
"PPub.py")return 1;;
"speedtest.py")return 1;;
*)echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "${1^^} \033[1;33m($(fun_trans "No hay una descripcion")!)";;
esac
}
ferramentas_fun () {
tput cuu1 && tput dl1
msg -bar2
msg -ama "$(fun_trans "MENU DE HERRAMIENTAS")"
msg -bar2
local Numb=1
for arqs in $(ls ${SCPfrm}); do
float_data "$arqs" "$Numb" && {
  script[$Numb]="$arqs"
  let Numb++
  }
done
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "DETALLES DEL SISTEMA") $ofc"
script[$Numb]="systeminf"
let Numb++
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "LIMPIAR CACHE SISTEMA") $ofc"
script[$Numb]="limpar"
let Numb++
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") $(msg -ama "[!]") " && msg -verd "$(fun_trans "AGREGAR HERRAMIENTAS")"
script[$Numb]="agregar"
let Numb++
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") $(msg -ama "[!]") " && msg -verm2 "$(fun_trans "REMOVER HERRAMIENTAS")"
script[$Numb]="remove"
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "VOLVER")"
script[0]="voltar"
msg -bar2
selection=$(selection_fun $Numb)
[[ -e "${SCPfrm}/${script[$selection]}" ]] && {
  ${SCPfrm}/${script[$selection]} ${id}
  } || {
  case ${script[$selection]} in
  "agregar")agregar_ferramenta;;
  "remove")remove_ferramenta;;
  "limpar")limpar_caches;;
  "systeminf")systen_info;;
  *)return 0;;
  esac
  }  
}
# Menu Instalaï¿½ï¿½o
pid_inst () {
[[ $1 = "" ]] && echo -e "\033[1;31m[off]" && return 0
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2\n"
    let i++
    }
done <<< "$portas_var"
[[ $(echo "${portas[@]}"|grep "$1") ]] && echo -e "\033[1;32m[on]" || echo -e "\033[1;31m[off]"
}
menu_inst () {
export -f fun_eth
export -f fun_bar
menuTXT="$(fun_trans "VOLVER")"
msg -ama "$(fun_trans "MENU DE INSTALACION")"
msg -bar
local Numb=1
for arqs in $(ls ${SCPinst}); do
float_data "$arqs" "$Numb" && {
  script[$Numb]="$arqs"
  let Numb++
  }
done
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$menuTXT"
msg -bar
script[0]="voltar"
selection=999
selection=$(selection_fun $Numb)
[[ -e "${SCPinst}/${script[$selection]}" ]] && {
  ${SCPinst}/${script[$selection]} ${id}
  } || return 0
}
# MENU FLUTUANTE
menu_func () {
local options=${#@}
local array
for((num=1; num<=$options; num++)); do
echo -ne "$(msg -verd "[$num]") $(msg -verm2 ">") "
  array=(${!num})
  case ${array[0]} in
    "-vd")msg -verd "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
    "-vm")msg -verm2 "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
  "-azc")msg -azuc "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
  "-rc")msg -rojoc "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
  "-am")msg -ama "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
  "-bl")msg -bra "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
    "-fi")msg -azu "$(fun_trans "${array[@]:2}") ${array[1]}" | sed ':a;N;$!ba;s/\n/ /g';;
    *)msg -azu "$(fun_trans "${array[@]}")" | sed ':a;N;$!ba;s/\n/ /g';;
  esac
done
}
# SISTEMA DE SELECAO
selection_fun () {
local selection="null"
local range
for((i=0; i<=$1; i++)); do range[$i]="$i "; done
while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
echo -ne "\033[1;37m$(fun_trans "Selecione una Opcion"): " >&2
read selection
tput cuu1 >&2 && tput dl1 >&2
done
echo $selection
}
on="\033[1;32m[ON]" && off="\033[1;31m[OFF]"
[[ $(ps x | grep badvpn | grep -v grep | awk '{print $1}') ]] && badvpn=$on || badvpn=$off
# EXECUï¿½ï¿½O MENU
export -f msg
export -f selection_fun
export -f fun_trans
export -f  menu_func
export -f meu_ip
export -f fun_ip
clear
msg -bar
msg -ama "$(fun_trans "\E[44;1;37mPUERTAS ACTIVAS Y INFORMACION DEL SERVIDOR VPS!!\E[44;1;37m")"
msg -bar
memorias
msg -bar
mine_port
echo ""
echo -e "\E[41;1;37mBADVPN:\E[44;1;37m" "$badvpn"
msg -bar
msg -ne "$(fun_trans "SISTEMA OPERATIVO"): " && msg -bra "$(os_system)  "
msg -ne "$(fun_trans "DIRECCION DE LA MAQUINA"): " && msg -bra "$(meu_ip)"
[[ -e ${SCPdir}/USRonlines ]] && msg -ne "$(fun_trans "USUARIOS EN LINEA"): " && msg -bra "$(cat ${SCPdir}/USRonlines) $(fun_trans "Usuarios")"
[[ -e ${SCPdir}/USRexpired ]] && msg -ne "$(fun_trans "USUARIOS EXPIRADOS"): " && msg -bra "$(cat ${SCPdir}/USRexpired) $(fun_trans "Usuarios")"
[[ -e ${SCPdir}/message.txt ]] && msg -bar && msg -bra "MENSAJE: $(cat ${SCPdir}/message.txt)"
[[ -e ${SCPdir}/key.txt ]] && msg -bar && msg -bra "USER-KEY: $(cat ${SCPdir}/key.txt)"
# NOVO SISTEMA DE MENUS

# SISTEMA DE HORA 
_hora=$(printf '%(%H:%M:%S)T')
# \033[1;31mHORA: \033[1;37m$_hora

msg -bar
msg -ama "$(fun_trans "MANAGER") \E[41;1;37m[NEW-ADM-PLUS]\E[41;1;37m \E[41;1;37m[RAUL_FERRAL_MX]\E[41;1;37m \E[41;1;37m \033[1;31m[\033[1;37m$_hora\033[1;31m] "
msg -bar
menu_func "ADMINISTRAR USUARIOS" "HERRAMIENTAS" "MENU DE INSTALACIONES" "-vd ACTUALIZACION" "-vm DESINSTALAR" "-fi $AutoRun INICIO AUTOMATICO" "CAMBIAR IDIOMA" "CAMBIAR COLORES" "-azc WEB PANEL (sshplus)"
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "SALIR DEL SCRIPT")"
msg -bar
# FIM
selection=$(selection_fun 9)
case ${selection} in
1)${SCPusr}/usercodes "${idioma}";;
2)ferramentas_fun;;
3)menu_inst;;
4)atualiza_fun;;
5)remove_script;;
6)fun_autorun;;
7)funcao_idioma;;
8)canbio_color;;
9)${SCPfrm}/panelweb.sh "${idioma}";;
0)cd $HOME && exit 0;;
esac
msg -ne "$(fun_trans "Enter Para Continuar")" && read enter
${SCPdir}/menu
